/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  Provider,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  LavaAxelarIpRPCDistribution,
  LavaAxelarIpRPCDistributionInterface,
} from "../../contracts/LavaAxelarIpRPCDistribution";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "backupOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBackupOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "name",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
        ],
        internalType: "struct LavaAxelarIpRPCDistribution.Provider[]",
        name: "providers",
        type: "tuple[]",
      },
    ],
    name: "payProviders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBackupOwner",
        type: "address",
      },
    ],
    name: "setBackUpOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newTokenAddress",
        type: "address",
      },
    ],
    name: "updateTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012ed380380620012ed8339818101604052810190620000379190620001ab565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001dd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001738262000146565b9050919050565b620001858162000166565b81146200019157600080fd5b50565b600081519050620001a5816200017a565b92915050565b600060208284031215620001c457620001c362000141565b5b6000620001d48482850162000194565b91505092915050565b61110080620001ed6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101335780639d76ea5814610151578063b84046d71461016f578063bf2554e21461018b578063fc0c546a146101a95761009e565b806313af4035146100a35780633af8e4ab146100bf5780635c241612146100dd5780636691461a146100f9578063893d20e814610115575b600080fd5b6100bd60048036038101906100b89190610b50565b6101c7565b005b6100c76102f0565b6040516100d49190610b8c565b60405180910390f35b6100f760048036038101906100f29190610d8b565b610316565b005b610113600480360381019061010e9190610b50565b6104b6565b005b61011d610621565b60405161012a9190610b8c565b60405180910390f35b61013b61064a565b6040516101489190610b8c565b60405180910390f35b61015961066e565b6040516101669190610b8c565b60405180910390f35b61018960048036038101906101849190610b50565b610694565b005b6101936107be565b6040516101a09190610b8c565b60405180910390f35b6101b16107e8565b6040516101be9190610e33565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061026e5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a490610ed1565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103bd5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390610ed1565b60405180910390fd5b60005b81518110156104b257600082828151811061041d5761041c610ef1565b5b602002602001015160000151905060008383815181106104405761043f610ef1565b5b602002602001015160200151905061049d338383600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661080e909392919063ffffffff16565b505080806104aa90610f4f565b9150506103ff565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061055d5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059390610ed1565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061073b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077190610ed1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61088a848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161084393929190610fa6565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610890565b50505050565b60006108bb828473ffffffffffffffffffffffffffffffffffffffff1661092790919063ffffffff16565b905060008151141580156108e05750808060200190518101906108de9190611015565b155b1561092257826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016109199190610b8c565b60405180910390fd5b505050565b60606109358383600061093d565b905092915050565b60608147101561098457306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161097b9190610b8c565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516109ad91906110b3565b60006040518083038185875af1925050503d80600081146109ea576040519150601f19603f3d011682016040523d82523d6000602084013e6109ef565b606091505b50915091506109ff868383610a0a565b925050509392505050565b606082610a1f57610a1a82610a99565b610a91565b60008251148015610a47575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15610a8957836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610a809190610b8c565b60405180910390fd5b819050610a92565b5b9392505050565b600081511115610aac5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1d82610af2565b9050919050565b610b2d81610b12565b8114610b3857600080fd5b50565b600081359050610b4a81610b24565b92915050565b600060208284031215610b6657610b65610ae8565b5b6000610b7484828501610b3b565b91505092915050565b610b8681610b12565b82525050565b6000602082019050610ba16000830184610b7d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bf582610bac565b810181811067ffffffffffffffff82111715610c1457610c13610bbd565b5b80604052505050565b6000610c27610ade565b9050610c338282610bec565b919050565b600067ffffffffffffffff821115610c5357610c52610bbd565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b610c8181610c6e565b8114610c8c57600080fd5b50565b600081359050610c9e81610c78565b92915050565b600060408284031215610cba57610cb9610c69565b5b610cc46040610c1d565b90506000610cd484828501610b3b565b6000830152506020610ce884828501610c8f565b60208301525092915050565b6000610d07610d0284610c38565b610c1d565b90508083825260208201905060408402830185811115610d2a57610d29610c64565b5b835b81811015610d535780610d3f8882610ca4565b845260208401935050604081019050610d2c565b5050509392505050565b600082601f830112610d7257610d71610ba7565b5b8135610d82848260208601610cf4565b91505092915050565b600060208284031215610da157610da0610ae8565b5b600082013567ffffffffffffffff811115610dbf57610dbe610aed565b5b610dcb84828501610d5d565b91505092915050565b6000819050919050565b6000610df9610df4610def84610af2565b610dd4565b610af2565b9050919050565b6000610e0b82610dde565b9050919050565b6000610e1d82610e00565b9050919050565b610e2d81610e12565b82525050565b6000602082019050610e486000830184610e24565b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e6572202f206261636b75702063616e2063616c6c60008201527f20746869732066756e6374696f6e000000000000000000000000000000000000602082015250565b6000610ebb602e83610e4e565b9150610ec682610e5f565b604082019050919050565b60006020820190508181036000830152610eea81610eae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5a82610c6e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f8c57610f8b610f20565b5b600182019050919050565b610fa081610c6e565b82525050565b6000606082019050610fbb6000830186610b7d565b610fc86020830185610b7d565b610fd56040830184610f97565b949350505050565b60008115159050919050565b610ff281610fdd565b8114610ffd57600080fd5b50565b60008151905061100f81610fe9565b92915050565b60006020828403121561102b5761102a610ae8565b5b600061103984828501611000565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561107657808201518184015260208101905061105b565b60008484015250505050565b600061108d82611042565b611097818561104d565b93506110a7818560208601611058565b80840191505092915050565b60006110bf8284611082565b91508190509291505056fea26469706673582212203135c7b5013b76fa8e0ea2d4ae4e8944c8b47093a84fb7af485456aa8def03ad64736f6c63430008130033";

type LavaAxelarIpRPCDistributionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LavaAxelarIpRPCDistributionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LavaAxelarIpRPCDistribution__factory extends ContractFactory {
  constructor(...args: LavaAxelarIpRPCDistributionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_tokenAddress, overrides || {});
  }
  override deploy(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_tokenAddress, overrides || {}) as Promise<
      LavaAxelarIpRPCDistribution & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LavaAxelarIpRPCDistribution__factory {
    return super.connect(runner) as LavaAxelarIpRPCDistribution__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LavaAxelarIpRPCDistributionInterface {
    return new Interface(_abi) as LavaAxelarIpRPCDistributionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LavaAxelarIpRPCDistribution {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LavaAxelarIpRPCDistribution;
  }
}
